@using FurnitureStore.Models
@model FurnitureStore.ViewModels.ShoppingCartViewModel
@{
    ViewBag.Title = "Korpa";
}

@Html.Partial("_PurchaseSuccess")

<div class="container border-primary my-3" id="content-wrapper" @*style="border:1px solid"*@>
    <hr />
    <h2 class="text-center page-title text-primary my-4">- Korpa -</h2>
    <hr />
    <table class="table table-bordered table-striped display nowarp w-100 bill-table mb-3">
        <thead class="thead-dark">
            <tr>
                <th class="text-center">Naziv proizvoda</th>
                <th class="text-center">Ime salona</th>
                <th class="text-center">Jedinična cena</th>
                <th></th>
                <th class="text-center">Količina</th>
                <th></th>
                <th class="text-center">Ukupno</th>
                <th class="text-center">Ukloni</th>
            </tr>
        </thead>
    </table>
    <div class="row">
        <div class="col">
            <hr />
            <h4 class="text-primary font-weight-bolder">
                Ukupna cena:
                @if (Model != null && Model.CartProducts.Any())
                {
                    <span class="font-weight-light" id="billTotalWithOutTax">
                        @Model.BillTotalPriceWithOutTax.ToString("#,##0.00 DIN")
                    </span>
                }
            </h4>
            <h4 class="text-primary font-weight-bolder">
                Porez:
                @if (Model != null && Model.CartProducts.Any())
                {                            
                    <span class="font-weight-light" id="tax">
                        @ConstantValues.Tax %
                    </span>
                }
            </h4>
            <h3 class="text-primary font-weight-bolder">
                Račun:                
                    @if (Model != null && Model.CartProducts.Any())
                    {
                        <span class="font-weight-light" id="billTotalWithTax">
                            @Model.BillTotalPriceWithTax.ToString("#,##0.00 DIN")
                        </span>
                    }
            </h3>
            <hr />
        </div>
    </div>
    @if (Model != null)
    {
        if (Model.CartProducts.Any())
        {
            <button class="btn btn-success mb-3 mx-auto d-block btn-buy" style="font-size: 1rem;letter-spacing:3px" onclick="buy()">Kupi</button>
        }
    }
</div>

<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.10.24/css/jquery.dataTables.css">
<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/rowreorder/1.2.7/css/rowReorder.dataTables.min.css">
<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/responsive/2.2.7/css/responsive.dataTables.min.css">

@section scripts
{
    <script type="text/javascript" charset="utf-8" src="https://cdn.datatables.net/1.10.24/js/jquery.dataTables.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdn.datatables.net/rowreorder/1.2.7/js/dataTables.rowReorder.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdn.datatables.net/responsive/2.2.7/js/dataTables.responsive.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="https://cdnjs.cloudflare.com/ajax/libs/notify/0.4.2/notify.min.js"></script>
    <script>
        let table;
        $(document).ready(function () {
            table = $(".bill-table").DataTable({
                ajax: {
                    url: "/Shopping/GetCartProducts",
                    method: "GET",
                    datatype: "json"
                },
                columns: [
                    { data: "ProductName", className: "dt-center" },
                    { data: "ShopName", className: "dt-center" },
                    {
                        data: "UnitPrice",
                        className: "dt-center",
                        render: function (data) {
                            var price = new Intl.NumberFormat("sr-RS", { style: "currency", currency: "DIN" }).format(data);
                            return price;
                        }
                    },
                    {
                        data: "Add",
                        className: "dt-center",
                        render: function (data) {
                            return "<button class='btn-dark' style='font-size:1rem;width:30px;height:30px;'"
                                + "onclick=addToCart('@Url.Action("AddToCart", "Shopping")/" + data + "')>+</button>";
                        }
                    },
                    { data: "Quantity", className: "dt-center" },
                    {
                        data: "Remove",
                        className: "dt-center",
                        render: function (data) {
                            return "<button class='btn-dark' style='font-size:1rem;width:30px;height:30px;'"
                                + "onclick=removeFromCart('@Url.Action("RemoveFromCart", "Shopping")/" + data + "')>-</button>";
                        }
                    },
                    {
                        data: "TotalPrice",
                        className: "dt-center",
                        render: function (data) {
                            var price = new Intl.NumberFormat("sr-RS", { style: "currency", currency: "DIN" }).format(data);
                            return price;
                        }
                    },
                    {
                        data: "ProductId",
                        className: "dt-center",
                        render: function (data) {
                            return "<button id='removeBtn' class='btn-dark'"
                                + "style='font-size:1rem;width:30px;height:30px;' data-product-id='" + data + "'"
                                + "onclick='removeProduct()'>&times;</button>"
                        }
                    }
                ],
                rowReorder: {
                    selector: 'td:nth-child(1)'
                },
                responsive: true,
                searching: false,
                paging: false,
                info: false,
                bSort: false,
                language: {
                    emptyTable: "<div style='font-weight: 500;'>Korpa je prazna</b></div>"
                },
            });
            $("#modalPurchased").on('hidden.bs.modal', function () {
                location.reload();
            })
        });
        function buy() {
            $.ajax({
                url: "/Shopping/Buy",
                method: "POST",
                success: function (data) {
                    if (data.success) {
                        $("#modalPurchased").modal("show");
                    }
                    else {
                        $.notify(data.messUrlge, {
                            globalPosition: "top center",
                            className: "error"
                        });
                    }
                }
            })
        }
        function addToCart(url) {
            $.ajax({
                url: url,
                method: "POST",
                success: function (data) {
                    if (data.success) {

                        table.ajax.reload();

                        // konvertuj cenu u odgovarajuci format
                        let price = new Intl.NumberFormat("sr-RS", { style: "currency", currency: "DIN" }).format(data.total);
                        let priceTax = new Intl.NumberFormat("sr-RS", { style: "currency", currency: "DIN" }).format(data.totalTax);

                        $("#cartItem").text(data.counter);
                        $("#billTotalWithTax").text(priceTax); // ukupna cena za racun sa porezom
                        $("#billTotalWithOutTax").text(price); // ukupna cena za racun sa porezom
                    }
                    else {
                        // Ako nema na stanju vise obavesti korisnika
                        $.notify(data.message, {
                            globalPosition: "top center",
                            className: "error"
                        });
                    }
                }
            });
        }
        function removeFromCart(url) {
            $.ajax({
                url: url,
                method: "POST",
                success: function (data) {
                    if (data.success) {

                        table.ajax.reload();

                        // konvertuj cenu u odgovarajuci format
                        let price = new Intl.NumberFormat("sr-RS", { style: "currency", currency: "DIN" }).format(data.total);
                        let priceTax = new Intl.NumberFormat("sr-RS", { style: "currency", currency: "DIN" }).format(data.totalTax);

                        $("#cartItem").text(data.counter); // broj proizvoda u korpi
                        $("#billTotalWithTax").text(priceTax); // ukupna cena za racun sa porezom
                        $("#billTotalWithOutTax").text(price); // ukupna cena za racun bez poreza
                    }
                    else {
                        table.ajax.reload(); // posto je korpa prazna reload-uj tabelu

                        $(".btn-buy").remove(); // posto je tabela prazna ukloni kupi dugme
                        $("#billTotalWithTax").remove(); // posto je tabela prazna ukloni cenu
                        $("#billTotalWithOutTax").remove();
                        $("#tax").remove();
                        $("#cartItem").text(data.counter); // vratice 0 pa ce counter biti 0 posto nema nista u korpi
                    }
                }
            });
        }
        function removeProduct() {
            let id = $("#removeBtn").attr("data-product-id");
            $.ajax({
                url: "/Shopping/RemoveProduct/" + id,
                method: "POST",
                success: function (data) {
                    if (data.success) {

                        table.ajax.reload();

                        // konvertuj cenu u odgovarajuci format
                        let price = new Intl.NumberFormat("sr-RS", { style: "currency", currency: "DIN" }).format(data.total);
                        let priceTax = new Intl.NumberFormat("sr-RS", { style: "currency", currency: "DIN" }).format(data.totalTax);

                        $("#cartItem").text(data.counter); // broj proizvoda u korpi
                        $("#billTotalWithTax").text(priceTax); // ukupna cena za racun sa porezom
                        $("#billTotalWithOutTax").text(price); // ukupna cena za racun bez poreza
                    }
                    if (data.isEmpty) {

                        $("#billTotalWithTax").remove(); // posto je tabela prazna ukloni cenu sa porezom
                        $("#billTotalWithOutTax").remove(); // posto je tabela prazna ukloni cenu bez poreza
                        $("#tax").remove(); // ukloni porez
                        $(".btn-buy").remove(); // posto je tabela prazna ukloni kupi dugme
                    }
                }
            })
        }
        function reloadPage() {
            location.reload(); // posto je kupovina uspesno obavljena osvezi stranicu
        }
    </script>
}